@page "/welcome"
@using Common.Extensions
@using Microsoft.Extensions.Logging
@using Blazored.LocalStorage
@inject ILocalStorageService localStorage

<ListGroup Flush="true">
    @foreach (var machine in Machines) {
        <ListGroupItem>
            <Div Flex="Flex.JustifyContent.Between" Width="Width.Is100">
                <Heading Size="HeadingSize.Is5" Margin="Margin.Is1.FromBottom">@machine.Name</Heading>
            </Div>
            <Small>@machine.Id</Small>
        </ListGroupItem>
    }
</ListGroup>

<Button Color="Color.Primary" Block="true" Clicked="OnReload">Blocked primary</Button>

<Heading Size="HeadingSize.Is2">Add machine</Heading>
<Field>
    <FieldLabel>Machine name</FieldLabel>
    <Addons>
        <Addon AddonType="AddonType.Body">
            <TextEdit Placeholder="Machine name" @bind-Text="MachineName"/>
        </Addon>
        <Addon AddonType="AddonType.End">
            <Button Color="Color.Primary" Disabled="@string.IsNullOrEmpty(MachineName)" Clicked="AddMachine">Add</Button>
        </Addon>
    </Addons>
</Field>

@code{

    // [Inject]
    // private IJSRuntime _jSRuntime { get; set; }
    //
    private List<Machine> Machines { get; set; } = new();

    private string MachineName { get; set; }
    //
    [Inject]
    public IMachineService MachineService { get; set; }

    [Inject]
    INotificationService NotificationService { get; set; }
    
    // inject logger
    [Inject]
    ILogger<Welcome> Logger { get; set; }


    protected override async Task OnInitializedAsync() {
      
        localStorage.Changed += (sender, e) =>
        {
            Console.WriteLine($"Value for key {e.Key} changed from {e.OldValue} to {e.NewValue}");
        };
            
            //var keys = await _jSRuntime.InvokeAsync<string>("localStorage.getItem", CancellationToken.None, "Machine_keys");
            //Logger.LogInformation(keys);
            
            Logger.LogInformation("In OnInitializedAsync");
            var machinesResult = await MachineService.GetMachines();

            if (machinesResult.IsSuccess) {
                Machines = machinesResult.Value.ToList();
                Logger.LogInformation(Machines.Count + " machines found");
            }
            else {
                _ = NotificationService.Error(machinesResult.CombineMessage(), "Could not load machines");
            }
       
        
       
    }

    private async Task OnReload() {
        //var keys = await _jSRuntime.InvokeAsync<string>("localStorage.getItem", CancellationToken.None, "Machine_keys");
        //Logger.LogInformation(keys);
        Machines = (await MachineService.GetMachines()).Value.ToList();
    }

    private async Task AddMachine() {
        if (!string.IsNullOrEmpty(MachineName)) {
            var machine = new Machine
            {
                Name = MachineName
            };


            var result = await MachineService.AddMachine(machine);
            if (!result.IsSuccess) {
                _ = NotificationService.Error(result.CombineMessage(), "Could not add machine");
                return;
            }

            Machines.Add(result.Value);
            MachineName = string.Empty;
            _ = NotificationService.Success("Machine added");
            return;
        }

        _ = NotificationService.Warning("Machine name is empty");
    }

}